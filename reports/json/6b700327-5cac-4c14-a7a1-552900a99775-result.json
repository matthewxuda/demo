{"name": "test_chrome", "status": "broken", "statusDetails": {"message": "AttributeError: module 'logger' has no attribute 'info'", "trace": "self = <ui_automation.tests.test_driver.Test object at 0x108d9ed60>, element = ('id', 'com.android.chrome:id/terms_accept'), wait_seconds = None, doc = ''\n\n    def is_element_exist(self, element, wait_seconds=None, doc=''):\n        \"\"\"\n        判断元素是否存在\n        \"\"\"\n        by = element[0]\n        value = element[1]\n        try:\n            if by == \"id\":\n>               WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.ID, value)))\n\nui_automation/driver/AppDriver.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c4c99bec-36bf-4952-bcfa-407de2f8459a\")>\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"c4c99bec-36bf-4952-bcfa-407de2f8459a\")>, timeout = None, poll_frequency = 0.5, ignored_exceptions = None\n\n    def __init__(\n        self,\n        driver,\n        timeout: float,\n        poll_frequency: float = POLL_FREQUENCY,\n        ignored_exceptions: typing.Optional[WaitExcTypes] = None,\n    ):\n        \"\"\"Constructor, takes a WebDriver instance and timeout in seconds.\n    \n        :Args:\n         - driver - Instance of WebDriver (Ie, Firefox, Chrome or Remote) or a WebElement\n         - timeout - Number of seconds before timing out\n         - poll_frequency - sleep interval between calls\n           By default, it is 0.5 second.\n         - ignored_exceptions - iterable structure of exception classes ignored during calls.\n           By default, it contains NoSuchElementException only.\n    \n        Example::\n    \n         from selenium.webdriver.support.wait import WebDriverWait \\n\n         element = WebDriverWait(driver, 10).until(lambda x: x.find_element(By.ID, \"someId\")) \\n\n         is_disappeared = WebDriverWait(driver, 30, 1, (ElementNotVisibleException)).\\\\ \\n\n                     until_not(lambda x: x.find_element(By.ID, \"someId\").is_displayed())\n        \"\"\"\n        self._driver = driver\n>       self._timeout = float(timeout)\nE       TypeError: float() argument must be a string or a number, not 'NoneType'\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:55: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <ui_automation.tests.test_driver.Test object at 0x108d9ed60>, element = ('id', 'com.android.chrome:id/terms_accept'), doc = ''\n\n    def find_element_click(self, element: Tuple[str, Union[str, Dict]],doc=''):\n        \"\"\"\n        寻找元素\n        \"\"\"\n        by = element[0]\n        value = element[1]\n        try:\n>           if self.is_element_exist(element):\n\nui_automation/driver/AppDriver.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ui_automation.tests.test_driver.Test object at 0x108d9ed60>, element = ('id', 'com.android.chrome:id/terms_accept'), wait_seconds = None, doc = ''\n\n    def is_element_exist(self, element, wait_seconds=None, doc=''):\n        \"\"\"\n        判断元素是否存在\n        \"\"\"\n        by = element[0]\n        value = element[1]\n        try:\n            if by == \"id\":\n                WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.ID, value)))\n            elif by == \"name\":\n                WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.NAME, value)))\n            elif by == \"class\":\n                WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.CLASS_NAME, value)))\n            elif by == \"text\":\n                WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.LINK_TEXT, value)))\n            elif by == \"partial_text\":\n                WebDriverWait(self.driver, wait_seconds).until(\n                    EC.presence_of_element_located((By.PARTIAL_LINK_TEXT, value)))\n            elif by == \"xpath\":\n                WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.XPATH, value)))\n            elif by == \"css\":\n                WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.CSS_SELECTOR, value)))\n            elif by == \"tag\":\n                WebDriverWait(self.driver, wait_seconds).until(EC.presence_of_element_located((By.TAG_NAME, value)))\n            else:\n                raise NameError(\"Please enter the correct targeting elements,'id','name','class','text','xpath','css'.\")\n        except:\n            screen_name = self.get_screenshot(doc)\n>           logger.info(f'screen is {screen_name}')\nE           AttributeError: module 'logger' has no attribute 'info'\n\nui_automation/driver/AppDriver.py:67: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <ui_automation.tests.test_driver.Test object at 0x108d9ed60>\n\n    def test_chrome(self):\n        try:\n            AppDriver.get_driver(self,AppDriver.appium_server_url,AppDriver.capabilities)\n            # 寻找单个元素并点击\n            element_accept = (\"id\", \"com.android.chrome:id/terms_accept\")\n            #AppDriver.is_element_exist(self,element_accept)\n            AppDriver.find_element_click(self,element_accept)\n            time.sleep(6)\n    \n            #self.driver.get(\"https://gorest.co.in/\")\n        except Exception as e:\n            AppDriver.get_screenshot(self,\"case failed\")\n>           raise e\n\nui_automation/tests/test_driver.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nui_automation/tests/test_driver.py:17: in test_chrome\n    AppDriver.find_element_click(self,element_accept)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ui_automation.tests.test_driver.Test object at 0x108d9ed60>, element = ('id', 'com.android.chrome:id/terms_accept'), doc = ''\n\n    def find_element_click(self, element: Tuple[str, Union[str, Dict]],doc=''):\n        \"\"\"\n        寻找元素\n        \"\"\"\n        by = element[0]\n        value = element[1]\n        try:\n            if self.is_element_exist(element):\n                if by == \"id\":\n                    return self.driver.find_element(By.ID, value).click()\n                elif by == \"name\":\n                    return self.driver.find_element(By.NAME, value).click()\n                elif by == \"class\":\n                    return self.driver.find_element(By.CLASS_NAME, value).click()\n                elif by == \"text\":\n                    return self.driver.find_element(By.LINK_TEXT, value).click()\n                elif by == \"partial_text\":\n                    return self.driver.find_element(By.PARTIAL_LINK_TEXT, value).click()\n                elif by == \"xpath\":\n                    return self.driver.find_element(By.XPATH, value).click()\n                elif by == \"css\":\n                    return self.driver.find_element(By.CSS_SELECTOR, value).click()\n                elif by == \"tag\":\n                    return self.driver.find_element(By.TAG_NAME, value).click()\n                else:\n                    raise NameError(\"Please enter the correct targeting elements,'id','name','class','text','xpath','css'.\")\n        except Exception as e:\n            screen_name = self.get_screenshot(doc)\n>           logger.info(f'screen is {screen_name}')\nE           AttributeError: module 'logger' has no attribute 'info'\n\nui_automation/driver/AppDriver.py:100: AttributeError"}, "attachments": [{"source": "e954e138-ca01-4149-bf91-77516059a4d0-attachment.png", "type": "image/png"}, {"source": "f3ea88ba-e061-4468-baee-17793a5630a5-attachment.png", "type": "image/png"}, {"name": "case failed", "source": "7c937d08-006b-49d1-9825-b038bf6deb1a-attachment.png", "type": "image/png"}], "start": 1702816311457, "stop": 1702816332890, "uuid": "1af1d761-b33e-432a-82e3-48e24abcc88d", "historyId": "5d77a3172122f5e84b3df3da888c6957", "testCaseId": "5d77a3172122f5e84b3df3da888c6957", "fullName": "ui_automation.tests.test_driver.Test#test_chrome", "labels": [{"name": "parentSuite", "value": "ui_automation.tests"}, {"name": "suite", "value": "test_driver"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "P_DWXU-MB0"}, {"name": "thread", "value": "6715-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ui_automation.tests.test_driver"}]}